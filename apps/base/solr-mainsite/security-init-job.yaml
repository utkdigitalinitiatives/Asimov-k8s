apiVersion: batch/v1
kind: Job
metadata:
  name: solr-mainsite-security-init
  namespace: solr-mainsite
spec:
  # This job runs once to initialize security.json in ZooKeeper
  # It will be triggered after Solr pods are running
  backoffLimit: 5
  template:
    metadata:
      labels:
        app: solr-security-init
        azure.workload.identity/use: "true"
    spec:
      serviceAccountName: solr-mainsite-sa
      restartPolicy: OnFailure

      # Note: Removed wait-for-solr init container to avoid circular dependency
      # This job needs to update security.json even if Solr health probes are failing

      containers:
      - name: setup-security
        image: solr:9.8.1
        command:
        - bash
        - -c
        - |
          set -e
          echo "Configuring Solr basic authentication..."

          # Read credentials from mounted secret
          USERNAME=$(cat /etc/solr-auth/username)
          PASSWORD=$(cat /etc/solr-auth/password)

          # ZooKeeper connection string
          ZK_HOST="shared-zookeeper-0.shared-zookeeper-headless.solr-system.svc.cluster.local:2181,shared-zookeeper-1.shared-zookeeper-headless.solr-system.svc.cluster.local:2181,shared-zookeeper-2.shared-zookeeper-headless.solr-system.svc.cluster.local:2181/mainsite"

          # Check if security.json already exists in ZooKeeper
          if /opt/solr/server/scripts/cloud-scripts/zkcli.sh -zkhost "$ZK_HOST" -cmd get /security.json > /tmp/security.json.raw 2>&1; then
            echo "Security.json already exists, updating blockUnknown setting..."

            # Extract just the JSON (skip ZooKeeper output)
            sed -n '/^{/,/^}/p' /tmp/security.json.raw > /tmp/security.json

            # Update blockUnknown to false using jq
            jq '.authorization.blockUnknown = false' /tmp/security.json > /tmp/security-updated.json

            # Upload updated security.json back to ZooKeeper
            /opt/solr/server/scripts/cloud-scripts/zkcli.sh \
              -zkhost "$ZK_HOST" \
              -cmd put /security.json "$(cat /tmp/security-updated.json)"

            echo "Security configuration updated - health probes now allowed!"
          else
            echo "Security.json doesn't exist, creating new configuration..."

            # Use Solr's auth command to enable basic authentication
            # This creates the initial security.json with hashed credentials
            /opt/solr/bin/solr auth enable \
              --type basicAuth \
              --credentials "$USERNAME:$PASSWORD" \
              --zk-host "$ZK_HOST" \
              --update-include-file-only false

            echo "Basic authentication configured successfully!"

            # Now update the newly created security.json
            /opt/solr/server/scripts/cloud-scripts/zkcli.sh \
              -zkhost "$ZK_HOST" \
              -cmd get /security.json > /tmp/security.json.raw

            sed -n '/^{/,/^}/p' /tmp/security.json.raw > /tmp/security.json
            jq '.authorization.blockUnknown = false' /tmp/security.json > /tmp/security-updated.json

            /opt/solr/server/scripts/cloud-scripts/zkcli.sh \
              -zkhost "$ZK_HOST" \
              -cmd put /security.json "$(cat /tmp/security-updated.json)"

            echo "Security configuration updated - health probes now allowed!"
          fi

          # Verify the updated configuration
          /opt/solr/server/scripts/cloud-scripts/zkcli.sh \
            -zkhost "$ZK_HOST" \
            -cmd get /security.json

          echo "Security configuration verified in ZooKeeper"

        volumeMounts:
        # Mount credentials from Azure Key Vault via CSI driver
        - name: auth-secrets
          mountPath: /etc/solr-auth
          readOnly: true

        # Mount for CSI driver to sync secrets
        - name: secrets-store-inline
          mountPath: /mnt/secrets-store
          readOnly: true

      volumes:
      # Secret created by SecretProviderClass
      - name: auth-secrets
        secret:
          secretName: solr-auth-secret

      # CSI driver volume to sync from Key Vault
      - name: secrets-store-inline
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: solr-auth-provider
